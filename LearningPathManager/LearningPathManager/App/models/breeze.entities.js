(function () {
    'use strict';

    // define factory
    var serviceId = 'breeze.entities';
    angular.module('app').factory(serviceId,
        ['common', breezeEntities]);

    // create factory
    function breezeEntities(common) {
        // create reference to metadata store
        var metadataStore = new breeze.MetadataStore();

        // init factory
        init();

        // public signature of factory
        return {
            metadataStore: metadataStore
        };

        // initi factory
        function init() {
            // create entities to map from sharepoint > breeze
            fillMetadataStore();

            common.logger.log('service loaded', metadataStore, serviceId);
        }

        // define metadata for entities for breeze
        function fillMetadataStore() {
            // namespace for entities on the server
            var namespace = '';

            // get ref to the breeze metadata helper library that will make life easier
            var helper = new breeze.config.MetadataHelper(namespace, breeze.AutoGeneratedKeyType.Identity);

            // get reference to adding a type and creating a default select for it
            var addType = function (typeDef) {
                var entityType = helper.addTypeToStore(metadataStore, typeDef);
                addDefaultSelect(entityType);
                return entityType;
            };

            // create the entities
            addLearningPathType();
            addLearningItemType();

            // create default select... this will create the $select OData operator
            // which will ONLY include fields we define in our metadata... telling
            // sharepoint we don't care about the other fields in that list
            function addDefaultSelect(type) {
                var custom = type.custom;
                // if already defined select by hand, quit
                if (custom && custom.defaultSelect != null) {
                    return;
                }

                var select = [];
                type.dataProperties.forEach(function(prop) {
                    if (!prop.isUnmapped) {
                        select.push(prop.name);
                    }
                });
                if (select.length) {
                    if(!custom) {
                        type.custom = custom = {};
                    }
                    custom.defaultSelect = select.join(',');
                }
                return type;
            }

            // create the Learning Path type
            function addLearningPathType() {
                addType({
                    name: 'LearningPath',
                    defaultResourceName: 'getbytitle(\'Learning Paths\')/items',
                    dataProperties: {
                        Id: {
                            type: breeze.DataType.Int32
                        },
                        Title: {
                            nullable: false
                        },
                        OData__Comments: {},
                        Created: {
                            type: breeze.DataType.DateTime
                        },
                        Modified: {
                            type: breeze.DataType.DateTime
                        }
                    },
                    navigationProperties: {
                        LearningItems: {
                            type: 'LearningItem',
                            hasMany: true
                        }
                    }
                });
            }

            // create the Learning Item type
            function addLearningItemType() {
                addType({
                    name: 'LearningItem',
                    defaultResourceName: 'getbytitle(\'Learning Items\')/items',
                    dataProperties: {
                        Id: {
                            type: breeze.DataType.Int32
                        },
                        Title: {
                            nullable: false
                        },
                        ItemType: {
                            nullable: false
                        },
                        OData__Comments: {},
                        Url: {
                            nullable: false,
                            validators: [breeze.Validator.url()]
                        },
                        LearningPathId: {
                            type: breeze.DataType.Int32,
                            nullable: false
                        },
                        Created: {
                            type: breeze.DataType.DateTime
                        },
                        Modified: {
                            type: breeze.DataType.DateTime
                        }
                    },
                    navigationProperties: {
                        LearningPath: 'LearningPath'
                    }
                });
            }

        }
    }

})();